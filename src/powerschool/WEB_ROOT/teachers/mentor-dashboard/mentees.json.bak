~[tlist_sql;

-- Get current mentor's information
WITH mentor_info AS (
  SELECT 
    u.dcid as mentor_dcid,
    t.first_name || ' ' || t.last_name as mentor_name
  FROM users u
  JOIN teachers t ON t.users_dcid = u.dcid
  WHERE u.teachernumber = '~(teachernumber)'
),

-- Get mentees assigned to this mentor
mentee_data AS (
  SELECT 
    mentee_user.dcid as mentee_dcid,
    mentee_user.teachernumber as mentee_id,
    mentee_teacher.first_name || ' ' || mentee_teacher.last_name as mentee_name,
    school.name as building,
    COALESCE(mentee_teacher.title, 'Teacher') as assignment,
    '2024-2025' as school_year,
    CASE 
      WHEN induction_log.json_clob IS NULL THEN 'incomplete'
      WHEN LENGTH(induction_log.json_clob) < 100 THEN 'incomplete'
      WHEN LOWER(induction_log.json_clob) LIKE '%"signatures"%' AND LOWER(induction_log.json_clob) LIKE '%"mentorteacher"%' THEN 'complete'
      ELSE 'pending-review'
    END as log_status,
    COALESCE(
      TO_CHAR(induction_log.whenmodified, 'YYYY-MM-DD"T"HH24:MI:SS"Z"'),
      TO_CHAR(SYSDATE, 'YYYY-MM-DD"T"HH24:MI:SS"Z"')
    ) as last_modified
  FROM mentor_info mi
  CROSS JOIN users mentee_user
  JOIN teachers mentee_teacher ON mentee_teacher.users_dcid = mentee_user.dcid
  JOIN schools school ON school.school_number = mentee_teacher.schoolid
  LEFT JOIN u_tesd_teacher_induction_log induction_log ON induction_log.usersdcid = mentee_user.dcid
  WHERE mentee_teacher.status = 1
    AND mentee_teacher.teachercategory = 4  -- Assuming this identifies new teachers/mentees
    AND (
      -- Add your mentor-mentee relationship logic here
      -- This could be based on a custom field, table, or other PowerSchool configuration
      mentee_teacher.mentor_teacher_dcid = mi.mentor_dcid
      OR 
      -- Alternative: if mentor assignments are stored differently
      EXISTS (
        SELECT 1 FROM customfields cf 
        WHERE cf.objectid = mentee_user.dcid 
        AND cf.fieldtable = 'users'
        AND cf.fieldname = 'mentor_dcid'
        AND cf.fieldvalue = TO_CHAR(mi.mentor_dcid)
      )
    )
),

-- Calculate summary statistics
summary_stats AS (
  SELECT 
    COUNT(*) as total_mentees,
    SUM(CASE WHEN log_status = 'complete' THEN 1 ELSE 0 END) as completed_logs,
    SUM(CASE WHEN log_status = 'pending-review' THEN 1 ELSE 0 END) as pending_reviews
  FROM mentee_data
)

-- Build the final JSON response
SELECT JSON_OBJECT(
  'mentorName' VALUE mi.mentor_name,
  'mentees' VALUE JSON_ARRAYAGG(
    JSON_OBJECT(
      'id' VALUE md.mentee_id,
      'name' VALUE md.mentee_name,
      'building' VALUE md.building,
      'assignment' VALUE md.assignment,
      'schoolYear' VALUE md.school_year,
      'logStatus' VALUE md.log_status,
      'lastModified' VALUE md.last_modified
    ) ORDER BY md.mentee_name
    RETURNING CLOB
  ),
  'summaryStats' VALUE JSON_OBJECT(
    'totalMentees' VALUE ss.total_mentees,
    'completedLogs' VALUE ss.completed_logs,
    'pendingReviews' VALUE ss.pending_reviews
  )
  RETURNING CLOB
) as json_response
FROM mentor_info mi
CROSS JOIN summary_stats ss
LEFT JOIN mentee_data md ON 1=1
GROUP BY mi.mentor_name, ss.total_mentees, ss.completed_logs, ss.pending_reviews;

;]~(json_string)[/tlist_sql]
